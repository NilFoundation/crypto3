///////////////////////////////////////////////////////////////
//  Copyright 2013 John Maddock. Distributed under the Boost
//  Software License, Version 1.0. (See accompanying file
//  LICENSE_1_0.txt or copy at https://www.boost.org/LICENSE_1_0.txt

#ifndef CRYPTO3_MP_CPP_INT_LITERALS_HPP
#define CRYPTO3_MP_CPP_INT_LITERALS_HPP

#include <boost/multiprecision/number.hpp>

// We will take most of the structures from cpp_int.
#include <boost/multiprecision/cpp_int/literals.hpp>

namespace boost {
    namespace multiprecision {
       namespace literals {
           namespace detail {
               template<unsigned Digits>
               struct unsigned_cpp_int_modular_literal_result_type {
                   static BOOST_MP_CXX14_CONSTEXPR unsigned bits = Digits * 4;
                   using backend_type =
                       boost::multiprecision::backends::cpp_int_modular_backend<bits>;
                   using number_type = boost::multiprecision::number<backend_type, boost::multiprecision::et_off>;
               };

           }    // namespace detail

       template<char... STR>
       BOOST_MP_CXX14_CONSTEXPR typename boost::multiprecision::literals::detail::unsigned_cpp_int_modular_literal_result_type<
           (sizeof...(STR)) - 2>::number_type
           operator"" _cppui_modular() {
           using pt = typename boost::multiprecision::literals::detail::make_packed_value_from_str<
               STR...>::type;
           return boost::multiprecision::literals::detail::make_backend_from_pack<
               pt, typename boost::multiprecision::literals::detail::
                       unsigned_cpp_int_modular_literal_result_type<(sizeof...(STR)) - 2>::backend_type>::value;
       }

#ifdef __ZKLLVM__
#define CRYPTO3_MP_DEFINE_SIZED_CPP_INT_MODULAR_LITERAL(Bits)                                                                   \
    inline BOOST_MP_CXX14_CONSTEXPR const char *                                                                                     \
    operator"" BOOST_JOIN(_cppui_modular, Bits)(const char *val) {                                                            \
        return val;                                                                                                   \
    }

#else
#define CRYPTO3_MP_DEFINE_SIZED_CPP_INT_MODULAR_LITERAL(Bits)                                                  \
    template<char... STR>                                                                                      \
    BOOST_MP_CXX14_CONSTEXPR boost::multiprecision::number<boost::multiprecision::backends::cpp_int_modular_backend<Bits>>    \
        operator"" BOOST_JOIN(_cppui_modular, Bits)() {                                                        \
        using pt = typename boost::multiprecision::literals::detail::make_packed_value_from_str<STR...>::type; \
        return boost::multiprecision::literals::detail::make_backend_from_pack<                                \
            pt, boost::multiprecision::backends::cpp_int_modular_backend<Bits>>::value;                        \
    }
#endif
        }    // namespace literals
    }   // namespace multiprecision
}   // namespace boost

// Moved here from algebra. This is a comprehensive list of all bitlengths we use.
CRYPTO3_MP_DEFINE_SIZED_CPP_INT_MODULAR_LITERAL(4)
CRYPTO3_MP_DEFINE_SIZED_CPP_INT_MODULAR_LITERAL(7)
CRYPTO3_MP_DEFINE_SIZED_CPP_INT_MODULAR_LITERAL(8)
CRYPTO3_MP_DEFINE_SIZED_CPP_INT_MODULAR_LITERAL(13)
CRYPTO3_MP_DEFINE_SIZED_CPP_INT_MODULAR_LITERAL(15)
CRYPTO3_MP_DEFINE_SIZED_CPP_INT_MODULAR_LITERAL(16)
CRYPTO3_MP_DEFINE_SIZED_CPP_INT_MODULAR_LITERAL(17)
CRYPTO3_MP_DEFINE_SIZED_CPP_INT_MODULAR_LITERAL(18)
CRYPTO3_MP_DEFINE_SIZED_CPP_INT_MODULAR_LITERAL(64)
CRYPTO3_MP_DEFINE_SIZED_CPP_INT_MODULAR_LITERAL(92)
CRYPTO3_MP_DEFINE_SIZED_CPP_INT_MODULAR_LITERAL(94)
CRYPTO3_MP_DEFINE_SIZED_CPP_INT_MODULAR_LITERAL(128)
CRYPTO3_MP_DEFINE_SIZED_CPP_INT_MODULAR_LITERAL(130)
CRYPTO3_MP_DEFINE_SIZED_CPP_INT_MODULAR_LITERAL(149)
CRYPTO3_MP_DEFINE_SIZED_CPP_INT_MODULAR_LITERAL(150)
CRYPTO3_MP_DEFINE_SIZED_CPP_INT_MODULAR_LITERAL(151)
CRYPTO3_MP_DEFINE_SIZED_CPP_INT_MODULAR_LITERAL(152)
CRYPTO3_MP_DEFINE_SIZED_CPP_INT_MODULAR_LITERAL(160)
CRYPTO3_MP_DEFINE_SIZED_CPP_INT_MODULAR_LITERAL(161)
CRYPTO3_MP_DEFINE_SIZED_CPP_INT_MODULAR_LITERAL(163)
CRYPTO3_MP_DEFINE_SIZED_CPP_INT_MODULAR_LITERAL(164)
CRYPTO3_MP_DEFINE_SIZED_CPP_INT_MODULAR_LITERAL(177)
CRYPTO3_MP_DEFINE_SIZED_CPP_INT_MODULAR_LITERAL(178)
CRYPTO3_MP_DEFINE_SIZED_CPP_INT_MODULAR_LITERAL(179)
CRYPTO3_MP_DEFINE_SIZED_CPP_INT_MODULAR_LITERAL(180)
CRYPTO3_MP_DEFINE_SIZED_CPP_INT_MODULAR_LITERAL(181)
CRYPTO3_MP_DEFINE_SIZED_CPP_INT_MODULAR_LITERAL(182)
CRYPTO3_MP_DEFINE_SIZED_CPP_INT_MODULAR_LITERAL(183)
CRYPTO3_MP_DEFINE_SIZED_CPP_INT_MODULAR_LITERAL(191)
CRYPTO3_MP_DEFINE_SIZED_CPP_INT_MODULAR_LITERAL(192)
CRYPTO3_MP_DEFINE_SIZED_CPP_INT_MODULAR_LITERAL(205)
CRYPTO3_MP_DEFINE_SIZED_CPP_INT_MODULAR_LITERAL(206)
CRYPTO3_MP_DEFINE_SIZED_CPP_INT_MODULAR_LITERAL(222)
CRYPTO3_MP_DEFINE_SIZED_CPP_INT_MODULAR_LITERAL(223)
CRYPTO3_MP_DEFINE_SIZED_CPP_INT_MODULAR_LITERAL(224)
CRYPTO3_MP_DEFINE_SIZED_CPP_INT_MODULAR_LITERAL(225)
CRYPTO3_MP_DEFINE_SIZED_CPP_INT_MODULAR_LITERAL(226)
CRYPTO3_MP_DEFINE_SIZED_CPP_INT_MODULAR_LITERAL(239)
CRYPTO3_MP_DEFINE_SIZED_CPP_INT_MODULAR_LITERAL(248)
CRYPTO3_MP_DEFINE_SIZED_CPP_INT_MODULAR_LITERAL(249)
CRYPTO3_MP_DEFINE_SIZED_CPP_INT_MODULAR_LITERAL(250)
CRYPTO3_MP_DEFINE_SIZED_CPP_INT_MODULAR_LITERAL(251)
CRYPTO3_MP_DEFINE_SIZED_CPP_INT_MODULAR_LITERAL(252)
CRYPTO3_MP_DEFINE_SIZED_CPP_INT_MODULAR_LITERAL(253)
CRYPTO3_MP_DEFINE_SIZED_CPP_INT_MODULAR_LITERAL(254)
CRYPTO3_MP_DEFINE_SIZED_CPP_INT_MODULAR_LITERAL(255)
CRYPTO3_MP_DEFINE_SIZED_CPP_INT_MODULAR_LITERAL(256)
CRYPTO3_MP_DEFINE_SIZED_CPP_INT_MODULAR_LITERAL(257)
CRYPTO3_MP_DEFINE_SIZED_CPP_INT_MODULAR_LITERAL(263)
CRYPTO3_MP_DEFINE_SIZED_CPP_INT_MODULAR_LITERAL(264)
CRYPTO3_MP_DEFINE_SIZED_CPP_INT_MODULAR_LITERAL(280)
CRYPTO3_MP_DEFINE_SIZED_CPP_INT_MODULAR_LITERAL(281)
CRYPTO3_MP_DEFINE_SIZED_CPP_INT_MODULAR_LITERAL(292)
CRYPTO3_MP_DEFINE_SIZED_CPP_INT_MODULAR_LITERAL(293)
CRYPTO3_MP_DEFINE_SIZED_CPP_INT_MODULAR_LITERAL(294)
CRYPTO3_MP_DEFINE_SIZED_CPP_INT_MODULAR_LITERAL(295)
CRYPTO3_MP_DEFINE_SIZED_CPP_INT_MODULAR_LITERAL(296)
CRYPTO3_MP_DEFINE_SIZED_CPP_INT_MODULAR_LITERAL(297)
CRYPTO3_MP_DEFINE_SIZED_CPP_INT_MODULAR_LITERAL(298)
CRYPTO3_MP_DEFINE_SIZED_CPP_INT_MODULAR_LITERAL(315)
CRYPTO3_MP_DEFINE_SIZED_CPP_INT_MODULAR_LITERAL(316)
CRYPTO3_MP_DEFINE_SIZED_CPP_INT_MODULAR_LITERAL(319)
CRYPTO3_MP_DEFINE_SIZED_CPP_INT_MODULAR_LITERAL(320)
CRYPTO3_MP_DEFINE_SIZED_CPP_INT_MODULAR_LITERAL(330)
CRYPTO3_MP_DEFINE_SIZED_CPP_INT_MODULAR_LITERAL(331)
CRYPTO3_MP_DEFINE_SIZED_CPP_INT_MODULAR_LITERAL(374)
CRYPTO3_MP_DEFINE_SIZED_CPP_INT_MODULAR_LITERAL(375)
CRYPTO3_MP_DEFINE_SIZED_CPP_INT_MODULAR_LITERAL(376)
CRYPTO3_MP_DEFINE_SIZED_CPP_INT_MODULAR_LITERAL(377)
CRYPTO3_MP_DEFINE_SIZED_CPP_INT_MODULAR_LITERAL(378)
CRYPTO3_MP_DEFINE_SIZED_CPP_INT_MODULAR_LITERAL(379)
CRYPTO3_MP_DEFINE_SIZED_CPP_INT_MODULAR_LITERAL(380)
CRYPTO3_MP_DEFINE_SIZED_CPP_INT_MODULAR_LITERAL(381)
CRYPTO3_MP_DEFINE_SIZED_CPP_INT_MODULAR_LITERAL(384)
CRYPTO3_MP_DEFINE_SIZED_CPP_INT_MODULAR_LITERAL(503)
CRYPTO3_MP_DEFINE_SIZED_CPP_INT_MODULAR_LITERAL(504)
CRYPTO3_MP_DEFINE_SIZED_CPP_INT_MODULAR_LITERAL(507)
CRYPTO3_MP_DEFINE_SIZED_CPP_INT_MODULAR_LITERAL(512)
CRYPTO3_MP_DEFINE_SIZED_CPP_INT_MODULAR_LITERAL(515)
CRYPTO3_MP_DEFINE_SIZED_CPP_INT_MODULAR_LITERAL(516)
CRYPTO3_MP_DEFINE_SIZED_CPP_INT_MODULAR_LITERAL(521)
CRYPTO3_MP_DEFINE_SIZED_CPP_INT_MODULAR_LITERAL(546)
CRYPTO3_MP_DEFINE_SIZED_CPP_INT_MODULAR_LITERAL(577)
CRYPTO3_MP_DEFINE_SIZED_CPP_INT_MODULAR_LITERAL(578)
CRYPTO3_MP_DEFINE_SIZED_CPP_INT_MODULAR_LITERAL(585)
CRYPTO3_MP_DEFINE_SIZED_CPP_INT_MODULAR_LITERAL(595)
CRYPTO3_MP_DEFINE_SIZED_CPP_INT_MODULAR_LITERAL(636)
CRYPTO3_MP_DEFINE_SIZED_CPP_INT_MODULAR_LITERAL(706)
CRYPTO3_MP_DEFINE_SIZED_CPP_INT_MODULAR_LITERAL(707)
CRYPTO3_MP_DEFINE_SIZED_CPP_INT_MODULAR_LITERAL(758)
CRYPTO3_MP_DEFINE_SIZED_CPP_INT_MODULAR_LITERAL(753)
CRYPTO3_MP_DEFINE_SIZED_CPP_INT_MODULAR_LITERAL(759)
CRYPTO3_MP_DEFINE_SIZED_CPP_INT_MODULAR_LITERAL(761)
CRYPTO3_MP_DEFINE_SIZED_CPP_INT_MODULAR_LITERAL(859)
CRYPTO3_MP_DEFINE_SIZED_CPP_INT_MODULAR_LITERAL(860)
CRYPTO3_MP_DEFINE_SIZED_CPP_INT_MODULAR_LITERAL(893)
CRYPTO3_MP_DEFINE_SIZED_CPP_INT_MODULAR_LITERAL(894)
CRYPTO3_MP_DEFINE_SIZED_CPP_INT_MODULAR_LITERAL(913)
CRYPTO3_MP_DEFINE_SIZED_CPP_INT_MODULAR_LITERAL(1024)
CRYPTO3_MP_DEFINE_SIZED_CPP_INT_MODULAR_LITERAL(1490)
CRYPTO3_MP_DEFINE_SIZED_CPP_INT_MODULAR_LITERAL(1536)
CRYPTO3_MP_DEFINE_SIZED_CPP_INT_MODULAR_LITERAL(2048)
CRYPTO3_MP_DEFINE_SIZED_CPP_INT_MODULAR_LITERAL(2790)
CRYPTO3_MP_DEFINE_SIZED_CPP_INT_MODULAR_LITERAL(3072)
CRYPTO3_MP_DEFINE_SIZED_CPP_INT_MODULAR_LITERAL(4096)
CRYPTO3_MP_DEFINE_SIZED_CPP_INT_MODULAR_LITERAL(4269)
CRYPTO3_MP_DEFINE_SIZED_CPP_INT_MODULAR_LITERAL(4314)
CRYPTO3_MP_DEFINE_SIZED_CPP_INT_MODULAR_LITERAL(6144)
CRYPTO3_MP_DEFINE_SIZED_CPP_INT_MODULAR_LITERAL(8192)

#endif    // CRYPTO3_MP_CPP_INT_CORE_HPP
