//---------------------------------------------------------------------------//
// Copyright (c) 2019 Mikhail Komarov <nemo@nil.foundation>
// Copyright (c) 2021 Ilias Khairullin <ilias@nil.foundation>
//
// MIT License
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
//---------------------------------------------------------------------------//

#define BOOST_TEST_MODULE hmac_test

#include <nil/crypto3/mac/algorithm/compute.hpp>
//#include <nil/crypto3/mac/algorithm/verify.hpp>

#include <nil/crypto3/mac/hmac.hpp>

#include <nil/crypto3/hash/sha1.hpp>
#include <nil/crypto3/hash/sha2.hpp>
#include <nil/crypto3/hash/sha3.hpp>
#include <nil/crypto3/hash/md5.hpp>

#include <boost/test/unit_test.hpp>
#include <boost/test/data/test_case.hpp>
#include <boost/test/data/monomorphic.hpp>

#include <iostream>
#include <string>
#include <cassert>
#include <vector>

using namespace nil::crypto3;

BOOST_AUTO_TEST_SUITE(hmac_manual_conformity_test_suite)

// generated by https://codebeautify.org/hmac-generator
BOOST_AUTO_TEST_CASE(hmac_sha1_4byte_key_range_input) {
    using mac_type = mac::hmac<hashes::sha1>;
    using digest_type = typename mac_type::digest_type;

    std::string key_str = "1111";
    std::vector<std::uint8_t> key_data(key_str.begin(), key_str.end());
    mac::mac_key<mac_type> key(key_data);

    std::string text_str = "Sample #1";
    std::vector<std::uint8_t> text(text_str.begin(), text_str.end());

    BOOST_CHECK_EQUAL(std::to_string(static_cast<digest_type>(compute<mac_type>(text, key))),
                      "8bee77d0d1ac0582cfcd761546980b4372993a84");
}

// generated by https://codebeautify.org/hmac-generator
BOOST_AUTO_TEST_CASE(hmac_sha1_100byte_key_range_input) {
    using mac_type = mac::hmac<hashes::sha1>;
    using digest_type = typename mac_type::digest_type;

    std::string key_str =
        "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111";
    std::vector<std::uint8_t> key_data(key_str.begin(), key_str.end());
    mac::mac_key<mac_type> key(key_data);

    std::string text_str = "Sample #1";
    std::vector<std::uint8_t> text(text_str.begin(), text_str.end());

    BOOST_CHECK_EQUAL(std::to_string(static_cast<digest_type>(compute<mac_type>(text, key))),
                      "b00e6fc4f6ddaca550919345ab63cebbeacae4b0");
}

// https://datatracker.ietf.org/doc/html/rfc2104
BOOST_AUTO_TEST_CASE(hmac_md5_rfc2104_1_range_input) {
    using mac_type = mac::hmac<hashes::md5>;
    using digest_type = typename mac_type::digest_type;

    std::array<std::uint8_t, 16> key_data;
    key_data.fill(0x0b);
    mac::mac_key<mac_type> key(key_data);

    std::string text_str = "Hi There";
    std::vector<std::uint8_t> text(text_str.begin(), text_str.end());

    BOOST_CHECK_EQUAL(std::to_string(static_cast<digest_type>(compute<mac_type>(text, key))),
                      "9294727a3638bb1c13f48ef8158bfc9d");
}

// https://datatracker.ietf.org/doc/html/rfc2104
BOOST_AUTO_TEST_CASE(hmac_md5_rfc2104_2_range_input) {
    using mac_type = mac::hmac<hashes::md5>;
    using digest_type = typename mac_type::digest_type;

    std::string key_str = "Jefe";
    std::vector<std::uint8_t> key_data(key_str.begin(), key_str.end());
    mac::mac_key<mac_type> key(key_data);

    std::string text_str = "what do ya want for nothing?";
    std::vector<std::uint8_t> text(text_str.begin(), text_str.end());

    BOOST_CHECK_EQUAL(std::to_string(static_cast<digest_type>(compute<mac_type>(text, key))),
                      "750c783e6ab0b503eaa86e310a5db738");
}

// https://datatracker.ietf.org/doc/html/rfc2104
BOOST_AUTO_TEST_CASE(hmac_md5_rfc2104_3_range_input) {
    using mac_type = mac::hmac<hashes::md5>;
    using digest_type = typename mac_type::digest_type;

    std::array<std::uint8_t, 16> key_data;
    key_data.fill(0xAA);
    mac::mac_key<mac_type> key(key_data);

    std::array<std::uint8_t, 50> text;
    text.fill(0xDD);

    BOOST_CHECK_EQUAL(std::to_string(static_cast<digest_type>(compute<mac_type>(text, key))),
                      "56be34521d144c88dbb8c733f0e8b3f6");
}

// generated by https://codebeautify.org/hmac-generator
BOOST_AUTO_TEST_CASE(hmac_sha256_6byte_key_iterator_input) {
    using mac_type = mac::hmac<hashes::sha2<256>>;
    using digest_type = typename mac_type::digest_type;

    std::string key_str = "123456";
    std::vector<std::uint8_t> key_data(key_str.begin(), key_str.end());
    mac::mac_key<mac_type> key(key_data);

    std::string text_str = "Sample #1";
    std::vector<std::uint8_t> text(text_str.begin(), text_str.end());

    BOOST_CHECK_EQUAL(std::to_string(static_cast<digest_type>(compute<mac_type>(text.begin(), text.end(), key))),
                      "48fe22343951ececb07526a2c15f236e3550f38038fa7e44b53b18ada695223a");
}

// generated by https://codebeautify.org/hmac-generator
BOOST_AUTO_TEST_CASE(hmac_sha256_100byte_key_iterator_input) {
    using mac_type = mac::hmac<hashes::sha2<256>>;
    using digest_type = typename mac_type::digest_type;

    std::string key_str =
        "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111";
    std::vector<std::uint8_t> key_data(key_str.begin(), key_str.end());
    mac::mac_key<mac_type> key(key_data);

    std::string text_str = "Sample #1";
    std::vector<std::uint8_t> text(text_str.begin(), text_str.end());

    BOOST_CHECK_EQUAL(std::to_string(static_cast<digest_type>(compute<mac_type>(text, key))),
                      "cc44dd15c36f1b65ab8723c0eeabe1dbffd0b49812b391a477a7330c00782d50");
}

// generated by https://www.liavaag.org/English/SHA-Generator/HMAC/
BOOST_AUTO_TEST_CASE(hmac_sha3_6byte_key_accumulator_input) {
    using mac_type = mac::hmac<hashes::sha3<512>>;
    using digest_type = typename mac_type::digest_type;
    using acc_set_type = mac::computation_accumulator_set<mac::computation_policy<mac_type>>;

    std::string key_str = "123456";
    std::vector<std::uint8_t> key_data(key_str.begin(), key_str.end());
    mac::mac_key<mac_type> key(key_data);

    acc_set_type acc(key);

    std::string text_str = "Sample #1";
    std::vector<std::uint8_t> text(text_str.begin(), text_str.end());

    compute<mac_type>(text.begin(), text.end() - 2, acc);
    compute<mac_type>(text.end() - 2, text.end(), acc);

    BOOST_CHECK_EQUAL(
        std::to_string(accumulators::extract::mac<mac::computation_policy<mac_type>>(acc)),
        "583b7a1fd5d3cb91f33ea5dfb5b30a0a0da99d6ca9823ae626298a054327563e4fef41976248c99e7b980a3a8b393eab35b5c5c381dfc3"
        "b750eccfe5a68698e9");
}

// generated by https://www.liavaag.org/English/SHA-Generator/HMAC/
BOOST_AUTO_TEST_CASE(hmac_sha3_100byte_key_accumulator_input) {
    using mac_type = mac::hmac<hashes::sha3<512>>;
    using digest_type = typename mac_type::digest_type;
    using acc_set_type = mac::computation_accumulator_set<mac::computation_policy<mac_type>>;

    std::string key_str =
        "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111";
    std::vector<std::uint8_t> key_data(key_str.begin(), key_str.end());
    mac::mac_key<mac_type> key(key_data);

    acc_set_type acc(key);

    std::string text_str = "Sample #1";
    std::vector<std::uint8_t> text(text_str.begin(), text_str.end());

    compute<mac_type>(text.begin(), text.end() - 2, acc);
    compute<mac_type>(text.end() - 2, text.end(), acc);

    BOOST_CHECK_EQUAL(
        std::to_string(accumulators::extract::mac<mac::computation_policy<mac_type>>(acc)),
        "6cf864145a3adfaa3dbd0538ce2021b142c2ea474858b25f1f5ad3e3ba484675db8a6047c1d64281384eccffdf8e8193a444b5c64881ef"
        "9c7a6a3b4330fd346c");
}

// generated by https://codebeautify.org/hmac-generator
BOOST_AUTO_TEST_CASE(hmac_sha256_6byte_key_iterator_output) {
    using mac_type = mac::hmac<hashes::sha2<256>>;
    using digest_type = typename mac_type::digest_type;
    using result_type = typename mac::computation_policy<mac_type>::result_type;

    std::string key_str = "123456";
    std::vector<std::uint8_t> key_data(key_str.begin(), key_str.end());
    mac::mac_key<mac_type> key(key_data);

    std::string text_str = "Sample #1";
    std::vector<std::uint8_t> text(text_str.begin(), text_str.end());

    std::vector<result_type> result;
    compute<mac_type>(text.begin(), text.end(), key, std::back_inserter(result));

    BOOST_CHECK_EQUAL(std::to_string(result.back()),
                      "48fe22343951ececb07526a2c15f236e3550f38038fa7e44b53b18ada695223a");
}

// generated by https://codebeautify.org/hmac-generator
BOOST_AUTO_TEST_CASE(hmac_sha256_100byte_key_iterator_output) {
    using mac_type = mac::hmac<hashes::sha2<256>>;
    using digest_type = typename mac_type::digest_type;
    using result_type = typename mac::computation_policy<mac_type>::result_type;

    std::string key_str =
        "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111";
    std::vector<std::uint8_t> key_data(key_str.begin(), key_str.end());
    mac::mac_key<mac_type> key(key_data);

    std::string text_str = "Sample #1";
    std::vector<std::uint8_t> text(text_str.begin(), text_str.end());

    std::vector<result_type> result;
    compute<mac_type>(text, key, std::back_inserter(result));

    BOOST_CHECK_EQUAL(std::to_string(result.back()),
                      "cc44dd15c36f1b65ab8723c0eeabe1dbffd0b49812b391a477a7330c00782d50");
}

// generated by https://www.liavaag.org/English/SHA-Generator/HMAC/
BOOST_AUTO_TEST_CASE(hmac_sha1_zero_input) {
    using mac_type = mac::hmac<hashes::sha1>;
    using digest_type = typename mac_type::digest_type;

    std::string key_str = "";
    std::vector<std::uint8_t> key_data(key_str.begin(), key_str.end());
    mac::mac_key<mac_type> key(key_data);

    std::string text_str = "";
    std::vector<std::uint8_t> text(text_str.begin(), text_str.end());

    BOOST_CHECK_EQUAL(std::to_string(static_cast<digest_type>(compute<mac_type>(text, key))),
                      "fbdb1d1b18aa6c08324b7d64b71fb76370690e1d");
}

// generated by https://www.liavaag.org/English/SHA-Generator/HMAC/
BOOST_AUTO_TEST_CASE(hmac_sha2_zero_input) {
    using mac_type = mac::hmac<hashes::sha2<256>>;
    using digest_type = typename mac_type::digest_type;

    std::string key_str = "";
    std::vector<std::uint8_t> key_data(key_str.begin(), key_str.end());
    mac::mac_key<mac_type> key(key_data);

    std::string text_str = "";
    std::vector<std::uint8_t> text(text_str.begin(), text_str.end());

    BOOST_CHECK_EQUAL(std::to_string(static_cast<digest_type>(compute<mac_type>(text, key))),
                      "b613679a0814d9ec772f95d778c35fc5ff1697c493715653c6c712144292c5ad");
}

// generated by https://www.liavaag.org/English/SHA-Generator/HMAC/
BOOST_AUTO_TEST_CASE(hmac_sha3_zero_input) {
    using mac_type = mac::hmac<hashes::sha3<512>>;
    using digest_type = typename mac_type::digest_type;

    std::string key_str = "";
    std::vector<std::uint8_t> key_data(key_str.begin(), key_str.end());
    mac::mac_key<mac_type> key(key_data);

    std::string text_str = "";
    std::vector<std::uint8_t> text(text_str.begin(), text_str.end());

    BOOST_CHECK_EQUAL(std::to_string(static_cast<digest_type>(compute<mac_type>(text, key))),
                      "cbcf45540782d4bc7387fbbf7d30b3681d6d66cc435cafd82546b0fce96b367ea79662918436fba442e81a01d0f9592d"
                      "fcd30f7a7a8f1475693d30be4150ca84");
}

BOOST_AUTO_TEST_SUITE_END()
