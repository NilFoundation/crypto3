#ifndef __MODULAR_PERMUTATION_ARGUMENT_CHUNKED_CONTRACT_TEMPLATE_HPP__
#define __MODULAR_PERMUTATION_ARGUMENT_CHUNKED_CONTRACT_TEMPLATE_HPP__

#include <string>

namespace nil {
    namespace blueprint {
        std::string modular_permutation_argument_chunked_library_template = R"(
// SPDX-License-Identifier: Apache-2.0.
//---------------------------------------------------------------------------//
// Copyright (c) 2023 Generated by ZKLLVM-transpiler
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//---------------------------------------------------------------------------//
pragma solidity >=0.8.4;

import "../../cryptography/transcript.sol";
// Move away unused structures from types.sol
import "../../types.sol";
import "../../basic_marshalling.sol";
import "hardhat/console.sol";

library modular_permutation_argument_$TEST_NAME${
    uint256 constant modulus = $MODULUS$;
    uint256 constant permutation_size = $PERMUTATION_SIZE$;
    uint256 constant special_selectors_offset = $PERMUTATION_SIZE$ * 0x40;
    uint256 constant table_values_offset = $PERMUTATION_SIZE$ * 0x40 + 0x80;
    bytes constant zero_indices = hex"$ZERO_INDICES$";
    uint16 constant max_quotient_chunks = $MAX_QUOTIENT_CHUNKS$;
    uint16 constant permutaion_parts = $PERMUTATION_PARTS$;

    struct perm_state{
        uint256 beta;
        uint256 gamma;
        uint256 V_P_value;
        uint256 h;
        uint256 g;
        uint256 tmp;
        uint256 previous_value;
        uint256 current_value;
    }

    function uint16_from_two_bytes(bytes1 b1, bytes1 b2) internal pure returns( uint256 result){
        unchecked{
            result = uint8(b1);
            result = result << 8;
            result += uint8(b2);
        }
    }

    // Append commitments
    function verify(
        bytes calldata blob,
        uint256 l0,
        bytes32 tr_state_before // It's better than transfer all random values
    ) internal view returns (uint256[3] memory F, bytes32 tr_state_after){
        types.transcript_data memory tr_state;
        tr_state.current_challenge = tr_state_before;
        perm_state memory state;

        state.beta = transcript.get_field_challenge(tr_state, modulus);
        state.gamma = transcript.get_field_challenge(tr_state, modulus);

        state.V_P_value = basic_marshalling.get_uint256_be(blob, table_values_offset + $PERMUTATION_TABLE_OFFSET$);
        state.h = 1;
        state.g = 1;

        uint32 cur = 0;
        uint32 chunk = 0;
        state.previous_value = state.V_P_value;
        for(uint256 i = 0; i < permutation_size;){
            state.tmp = addmod(
                state.gamma,
                basic_marshalling.get_uint256_be(
                    blob, table_values_offset + uint16_from_two_bytes(zero_indices[i<<1], zero_indices[(i<<1)+1])
                ),
                modulus
            );

            state.g = mulmod(state.g,  addmod(
                mulmod(state.beta, basic_marshalling.get_uint256_be(blob, (i *0x20 )), modulus),
                state.tmp,
                modulus
            ), modulus);
            state.h = mulmod(state.h, addmod(
                mulmod(state.beta, basic_marshalling.get_uint256_be(blob, permutation_size * 0x20 + (i *0x20 )), modulus),
                    state.tmp,
                    modulus
                ),
                modulus
            );
            unchecked{cur++;}
            if( cur == max_quotient_chunks - 1 ){
                state.current_value = basic_marshalling.get_uint256_be(blob, table_values_offset + $PERMUTATION_TABLE_OFFSET$ + 0x40 + (chunk<<5));
                F[1] = addmod(
                    F[1],
                    mulmod(
                        transcript.get_field_challenge(tr_state, modulus),
                        addmod(
                            mulmod(state.previous_value,state.g, modulus),
                            modulus - mulmod(state.current_value, state.h, modulus),
                            modulus
                        ),
                        modulus
                    ),
                    modulus
                );
                state.previous_value = state.current_value;
                state.g = 1;
                state.h = 1;
                unchecked{chunk++;}
                cur = 0;
            }
            unchecked{i++;}
        }
        F[0] = mulmod(l0, addmod(1, modulus - state.V_P_value, modulus), modulus);

        state.previous_value = state.current_value;
        state.current_value = basic_marshalling.get_uint256_be(blob, table_values_offset + $PERMUTATION_TABLE_OFFSET$ + 0x20);
        F[1] = addmod(
            F[1],
            addmod(
                mulmod(state.previous_value,state.g, modulus),
                modulus - mulmod(state.current_value, state.h, modulus),
                modulus
            ),
            modulus
        );
        state.tmp = addmod(
            addmod(
                basic_marshalling.get_uint256_be(blob, special_selectors_offset),
                basic_marshalling.get_uint256_be(blob, special_selectors_offset + 0x40),
                modulus
            ),
            modulus - 1,
            modulus
        );
        F[1] = mulmod(
            state.tmp,
            F[1],
            modulus
        );
        F[2] = mulmod(
            mulmod(basic_marshalling.get_uint256_be(blob, permutation_size * 0x40), state.V_P_value, modulus),
            addmod(state.V_P_value, modulus-1, modulus),
            modulus
        );
        return (F, tr_state.current_challenge);
    }
}
        )";
    }
}

#endif //__MODULAR_CONTRACT_TEMPLATE_HPP__