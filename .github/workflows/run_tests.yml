name: Run Multiplatform Tests

on:
  pull_request:
    types:
      - opened
      - synchronize

permissions: {}

env:
  TESTS_ARTIFACT_NAME: 'test-results'
  BOOST_VERSION: '1.81.0'

jobs:
  handle-syncwith:
    name: Call Reusable SyncWith Handler
    uses: NilFoundation/ci-cd/.github/workflows/reusable-handle-syncwith.yml@v1
    with:
      ci-cd-ref: 'v1'
    secrets: inherit


  build-and-test:
    name: "Build and Test using Matrix"
    needs:
      - handle-syncwith
    runs-on: ${{ matrix.os }}
    strategy:
      # Set up a matrix to run the following 4 configurations:
      # 1. <Linux, Release, latest G++ compiler toolchain on the default runner image, default generator>
      # 2. <Linux, Release, latest Clang++ compiler toolchain on the default runner image, default generator>
      # 3. <MacOS, Release, latest G++ compiler toolchain on the default runner image, default generator>
      # 4. <MacOS, Release, latest Clang++ compiler toolchain on the default runner image, default generator>
      matrix:
        os: [ubuntu-22.04, macos-12]
        cpp_compiler: [g++, clang++]
        build_type: [Release]
    steps:
      - name: Checkout Crypto3 repository
        uses: actions/checkout@v4
        with:
          submodules: 'true' # Using true fetches only the top-level submodules
          fetch-depth: 1 # Fetch only the latest commit on the triggered branch/ref

      - name: Checkout submodules to specified refs
        if: inputs.submodules-refs != ''
        uses: NilFoundation/ci-cd/actions/recursive-checkout@v1
        with:
          paths: ${{ github.workspace }}/**
          refs: ${{ needs.handle-syncwith.outputs.prs-refs }}

      - name: Set usefull strings
        # Turn input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
        id: strings
        shell: bash
        run: |
          # CMake locations
          echo "umbrella-build-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

          # Dependencies dir location
          echo "dependencies-dir=${{ github.workspace }}/../dependencies" >> "$GITHUB_OUTPUT"

          # Get platform version
          os_version=${{ matrix.os }}
          platform_version=${os_version##*-}
          echo "platform-version=${platform_version}" >> $GITHUB_OUTPUT

      - name: Set up dependencies directory
        run: |
          mkdir -p "${{ steps.strings.outputs.dependencies-dir }}"

      - name: Install boost
        uses: MarkusJx/install-boost@v2.4.4
        id: install-boost
        with:
          boost_version: ${{ env.BOOST_VERSION }}
          # Extract version number from matrix.os by replacing os_name-
          # A list of supported versions can be found here:
          # https://github.com/MarkusJx/prebuilt-boost/blob/main/versions-manifest.json
          platform_version: ${{ steps.strings.outputs.platform-version }}
          boost_install_dir: ${{ steps.strings.outputs.dependencies-dir }}

      - name: Configure CMake
        run: >
          cmake -B ${{ steps.strings.outputs.umbrella-build-dir }}
          -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
          -DBUILD_TESTS=TRUE
          -DENABLE_JUNIT_TEST_OUTPUT=TRUE
          -S ${{ github.workspace }}

        env:
          BOOST_ROOT: "${{ steps.install-boost.outputs.BOOST_ROOT }}"

      - name: Build all
        id: build
        working-directory: ${{ steps.strings.outputs.umbrella-build-dir }}
        run: |
          # Not considering failed targets bad. We will handle them as junit test result
          build_log_path=${{ steps.strings.outputs.umbrella-build-dir }}/build.log
          make -k -j $(uname | grep -q Darwin && sysctl -n hw.ncpu || nproc) 2>&1 | tee build.log
          echo "build-log=$build_log_path" >> "$GITHUB_OUTPUT"

      - name: Generate JUnit Report from build result
        id: make-build-report
        uses: NilFoundation/ci-cd/actions/build-log-to-junit@v1
        with:
          build-log: ${{ steps.build.outputs.build-log }}

      - name: Run tests inside test dir
        working-directory: ${{ steps.strings.outputs.submodule-test-dir }}
        # Not considering failed tests bad. We will compare diff instead
        run: ctest -v -j $(uname | grep -q Darwin && sysctl -n hw.ncpu || nproc) || exit 0

      - name: Move test results to dir for uploading
        id: prepare-for-uploading
        run: |
          # upload action takes only absolute path,the following command fits both macOS and Linux
          artifact_dir=${{ github.workspace }}/../results_for_uploading
          mkdir $artifact_dir
          artifact_dir=$(cd ${{ github.workspace }}/../results_for_uploading && pwd)

          custom_tests_dir=$artifact_dir/${{ matrix.os }}/${{ matrix.cpp_compiler }}/${{ matrix.build_type }}
          mkdir -p $custom_tests_dir

          mv ${{ steps.make-build-report.outputs.build-junit-report }} $custom_tests_dir

          # Find and process each file
          libs_build_dir="${{ steps.strings.outputs.umbrella-build-dir }}/libs"
          find "$libs_build_dir" -type f -path "*/junit_results/*.xml" | while read -r file; do
              relative_path="${file#$libs_build_dir}"
              final_path="$custom_tests_dir/$relative_path"
              mkdir -p "$(dirname "$final_path")"
              mv "$file" "$final_path"
          done

          echo "artifact-dir=$artifact_dir" >> "$GITHUB_OUTPUT"

      - name: Upload tests JUnit results
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.TESTS_ARTIFACT_NAME }}
          path: ${{ steps.prepare-for-uploading.outputs.artifact-dir }}


  publish-results:
    name: "Publish Tests Results"
    needs:
      - build-and-test
    runs-on: ubuntu-latest
    permissions:
      checks: write
      pull-requests: write # needed unless run with comment_mode: off
      actions: read # required by download step to access artifacts API
      statuses: write # required to set commit status
    steps:
      - name: Download Test Results Artifact
        uses: actions/download-artifact@v3
        with:
          name: ${{ env.TESTS_ARTIFACT_NAME }}

      - name: Publish Test Results
        uses: EnricoMi/publish-unit-test-result-action@ca89ad036b5fcd524c1017287fb01b5139908408
        with:
          files: "${{ env.TESTS_ARTIFACT_NAME }}/**/*.xml"
          report_individual_runs: true
